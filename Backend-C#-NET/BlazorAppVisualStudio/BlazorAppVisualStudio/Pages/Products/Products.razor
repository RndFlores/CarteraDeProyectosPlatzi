@page "/product"

@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager NavigationManager



<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products"></ModuleTitle>
@* <link rel="stylesheet" href="./Products.razor.css"/> 

    ahora estará en Product.razor.css
*@
    <style>
    .products-container{
        display:grid;
        grid-template-columns:repeat(auto-fill,280px);
        grid-auto-rows:auto;
        grid-grap:1rem;
    }

</style> 

<button class="btn btn-dark" @onclick="@(()=>NavigationManager.NavigateTo("/addproduct"))">Add product</button>
@if (products!=null && products.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270"
                height="210">
                <div class="card-body">
                    <h5><b>@product.Title</b></h5>
                    <p>@product.Price?.ToString("C")</p>

                </div>
            </div>
        }
    </div>
}
else
{
    <p>No products available.</p>
}
@* <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(
                        () => DeleteProduct(product))">
    <span class="oi oi-trash"></span>
</button> *@
@code {
    private List<Product>? products;


    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        // return await productService.Get();
        products = await productService.Get();
    }

    
}